


# Installing Argo on Minikube

You can install Argo on a Kubernetes cluster that runs in Minikube. This allows you to run Argo workflows and Kubernetes Deployments on Minikube. You cannot run Argo deployments on Minikube.

## Required Environment

This is the environment configuration for installing Argo on an existing Kubernetes cluster on Minikube:

<!--Argo on Minikube has been tested on Mac OSX. Minikube was using the xhyve hypervisor.-->

* Minikube version 0.22.3
* Kubernetes version 1.7.5
* Minimum of 4GB of memory
* `kubeconfig` file for the cluster

### Installing Minikube and Installing Argo

1. Install Minikube following the instructions [here](https://kubernetes.io/docs/tasks/tools/install-minikube/).

2. Start Minikube with at least 4 GB of memory.

 ```
 $ minikube start --memory 4096

 ```

1. Install the command-line interface (CLI) for Argo:

 * For Mac

    ```

    curl -sSL -O https://s3-us-west-1.amazonaws.com/ax-public/argocli/stable/darwin_amd64/argo

    ```
 * For Linux

    ```
    curl -sSL -O https://s3-us-west-1.amazonaws.com/ax-public/argocli/stable/linux_amd64/argo
    chmod +x argo

    ```

2. Enter this command to log into Argo CLI:

   ```

   $ ./argo login

   ```

3. Enter the appropriate value for each interactive prompt:

   ```

   Enter a configuration name (default):
   Enter cluster URL: <cluster_URL>
   Enter cluster username: <email_address_of_cluster_user>
   Enter cluster password: <password>
   Config written to: <path_to_config>

   ```

   Upon completing this step, you can now enter Development CLI commands on your Kubernetes cluster running in Minikube.

1. From the Argo CLI, run `argo cluster`. (The `argo cluster ops >` prompt appears. You are now in the Argo Cluster Management mode.)

5. Install Argo on the Kubernetes cluster with either Local Storage or External Storage.

  **Using Local Storage**

  Argo creates a local S3Proxy pod that writes data to a local volume.

  ```

  > argocluster install-argo-only --cloud-provider minikube --cluster-name <name_of_kubernetes_cluster> --kubeconfig /tmp/ax_kube/<name_of_kubeconfig_file>

  ```
  **Using External Storage**

  You want to use Minikube locally but store the artifacts generated by a workflow in a central sharable bucket such as Amazon S3 or Google Cloud Storage.
  You specify the bucket that Argo uses along with the given access key, secret key and endpoint. (Argo uses the bucket to store metadata and artifacts that are generated in a workflow.)

  ```
  > argocluster install-argo-only --cloud-provider minikube --cluster-name <name_of_kubernetes_cluster> --kubeconfig /tmp/ax_kube/<name_of_kubeconfig_file> --access-key <my_access_key> --secret-key <my_secret_key> --bucket-endpoint https://storage.googleapis.com --cluster-bucket <my_bucket_name>

  ```

6. After the installation completes, launch the Argo Web UI by running this command:

  ```
  $ minikube service -n axsys axops

  ```
After this, you can run Argo workflows.

## Uninstalling Argo

```

> argocluster uninstall-argo-only --kubeconfig /tmp/ax_kube/name_of_kube-config_for_argo_on_Minikube>

```
